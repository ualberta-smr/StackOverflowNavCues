lexrank.summarize("I have finally -lrb- kind of -rrb- solve my problem. just for future reference, and in case somebody else run into the same trouble, here the solution I come up with: to make the worksheet publicly accessible, one need to make the worksheet publicly accessible. this be do in the Google Sheets web interface, use the menu entry CW. it be possible to either publish the whole spreadsheet or individual worksheet. a api to access datum from Google Sheets programmatically be describe on the link. this api use url of the form cwkeycwworksheetidcw. slightly oddly, the meaning of key and worksheetid seem not to be explain in the api documentation. my experiment show that the key value can be find by take part of the url use to access the sheet via the web interface -lrb- see also link -rrb-. the key be everything after the CW, until the next slash. for the spreadsheet in the question, the key be thus CW. the worksheetid seem to be a integer, give the position of the worksheet in the spreadsheet. for the example in the question one have to know that the sheet show be the second worksheet, the worksheetid in this case be CW. the API define CW and CW request. to access a export resource without authentication, cw request must be use. the API call to get datum from the spreadsheet be explain in the section link -lrb- click on the `` Protocol '' tab in the example -rrb-. the url require extract the datum from the spreadsheet in the question be. link. a HTTP get request to this url return that datum as xml. -lrb- I have not find a way to get the datum as json. -rrb- the usual protection again cross-site request make it difficult to access the datum via JavaScript xml rpc call in a web app. one way around this problem be to proxy the API call through the web server -lrb- e.g. use nginx 's link -rrb-. the above step be at least a partial solution to the problem in the question. the only difficulty be that the datum be return as xml rather than as json. since the api documentation do not mention JSON, maybe it be not possible any more to extract the datum in this format ? here be how to get the json use those same url parameter: cred to @jochen on the answer with the path all the way up to xml cw. as @jochen 's answer explain, this cw be base on the order of the sheet in the spreadsheet. a faster solution here be to use this link to wrap around you exist spreadsheet. you first need to change you sheet access to CW. add the CW and CW html param to the url below. link. eg: you cw be you sheet id which be. cw. and you sheet which be. cw. in you case you can actually see you datum here as json at. link. to be safe, you should deploy the code cw in the github gist above as you own in you Google Drive. if you want to use the latest api -lrb- v4 -rrb-, you will need to do the following: use a request of the form: you will then get a clean json response back: note that if you want to specify the entire contents of a page, a identifier such as cw be link. see link for more information. as of v4 api, link by a identifier -lrb- e.g. api key -rrb-: request to the Google Sheets API for public datum must be accompany by a identifier, which can be a API key or a access token. follow the step in the link document to create a API key on the link. make sure to: note that you can link without force the user to log in: in the new Sheets API v4, there be no explicit declaration of visibility. API call be make use spreadsheet id. if the application do not have permission to access specify spreadsheet, a error be return. otherwise the call proceeds. note that you do not need to publish the sheet to the web. all you need to do be make sure anyone with the link can access the sheet. -lrb- i.e. when you click create credentials on the Google Sheets API, choose other non-ui, user datum, and it say `` user datum can not be access from a platform without a ui because it require user interaction for sign-in. '' you can safely ignore that message. the API key be all you really need, since this be public datum. -rrb- the request be miss a valid API key. you do not include the CW param in you call. API key not valid. please pass a valid API key. Google developer console. you supply a incorrect API key. make sure that you type in you key correctly. if you do not have a key yet, go to the link and create one. API Key not find. please pass a valid API key. Google developer console API key. you API key be probably correct, but you most likely do not add the Google Sheets permission. go to the Google developer console API key page and add the sheet permission. the caller do not have permission. you sheet be not set to be publicly accessible.", 1, function (err, toplines, text) { console.log(toplines); });

[ { weight: 0.14217784620800805,
    text: 'for the spreadsheet in the question, the key be thus CW.',
    index: 9 } ]