as per you question , the part where you traverse the return json object and create the tree be problematic . in you code , the recursive function to traverse the json datum have a few minor issue with the generate cw code . the structure of the return object make it a bit challenging . 

I be able to modify you CW code a bit -lrb- without change it too much -rrb- to print out the tree . the relevant code below : 

CSS : 

HTML & JS : 

this should provide a properly nested cw base tree . if create a image of the tree be a hard requirement , you be best bet be to properly style the generate CW code fragment , create a html page with it on the server and then use a server side tool such as link that can be use to render the html document into a image . 

also , one other thing I would like to mention be that instead of load the retrieve html into a div , I would recommend that you use a cw as then , the retrieve html would not interfere with you current page . in my example above , I have add a cw in the preview cw . in such a case , you can use php to only output the CW datum and set the CW to preview the url would be as simple as assign the url as the CW attribute of the CW . like this : cw . 

Edit : update code with a fix . also add a new js function CW to retro-actively convert the CW into a clickable , collapsible tree structure as per op 's comment . also add relevant cw style to style the tree structure . the tree now look like the below picture for I : 



check out this link which be write by Jack . 

link 

Hope it help you . 

Addendum : this be a long answer , but it address specific problem and solution for the code snippet you provide . I hope you and other will find it worth the time to compare . : -rrb- 

when parse the DOM , I recommend set the element name from the return object as the associative key in CW use CW instead of push they onto the array as index item . to do this , CW must be define as a array first . later , if no item get merge into it , you simply cw it before CW get add to the main object . 

this make the final json result simpler to parse by preclude the need to use a nested loop in you javascript when build the tree . 

I also recommend insert conditional check for cw before do CW loop . you exist code be throw `` warning '' message when zero-length element enter into the loop . 

lastly , you may choose to simplify you logic for handle node type by replace you current CW statement with a single cw check for CW , which I think be what you be try to accomplish . 

insert a empty iframe into which you will load you target site . insert the markup from another site into yours can -lrb- and will likely -rrb- cause conflict with you own code . 

the cw function be suffer from three flaw : 

the use of a counter to create id on the fly and then use jquery to find previously make element with those id on which to append list item be a performance drain and confuse to debug . 

the use of cw result in jquery redundantly enter the recursive call and append multi-redundant child node to the tree . 

because it be the callback of a separate asynchronous call , it could execute before the first asynchronous call to CW have finish . 

move the async call to get the JSON into the callback function on the first async call to prevent it from fetch incomplete or old json from the server . 

you should also use this first callback to set the CW CW and empty the CW container , so that subsequent action do not append more than one tree . you could accomplish the same thing by use CW instead of cw follow by CW . 

to build the tree , I recommend the follow simpler approach , which recursively build the list as a string so that the cw method be only call once . for larger tree , this will dramatically improve performance . 

you may introduce a counter and dynamically assign id to this function if you want to , but I leave it out to demonstrate more clearly that they be not need to build the tree . 

I also recommend check for the existence of child node before enter a recursive call . do this check allow you to pass in only the child node object , which -- because of the new json result from change make to the PHP script -- now contain tag name as the key instead of index key with the element as child . if we have not simplify the JSON , a second loop would have be require at this point to retrieve each element . 

you will also notice the inclusion of CW attribute and cw attribute . this set you up to be fully accessible if you choose . 

see : link 

it also provide you with a convenient and semantic way to control CSS and toggle state , which you can see demonstrate in the additional click handler add at the bottom of the script and the CSS example at the bottom of this answer . 

finally , as mention above , the existence of the CW and CW attribute provide a semantic and convenient way to control the style . 

look at XSLT processing . work fine with much less code effort 

construct multi-dimension php array for you HTML tag and then give that array as input to the php inbuilt function json_encode -lrb- $ array -rrb- and this return tree structured json output 

