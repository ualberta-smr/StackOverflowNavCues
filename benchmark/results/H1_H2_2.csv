QuestionId|AnswerID|ParagraphIndex|SentenceIndex|Sentence|TruePositive?|Condition|Tags In Condition|NFReqs|Nouns|IsFirstPerson?|IsUnsurePhrase?|HasWantedGrammerDep?
39423367|39423764|9|0|The only ( rare ) option which is useful in Swift is CW which is required if if the JSON root object could be a value type ( CW, CW, CW or CW ) rather than one of the collection types ( CW or CW ).|True|object could be type |['type', 'object']|[]|['type', 'object']|False|False|False|False
33650399|42032709|0|0|json-loader does n't load json file if it's array, in this case you need to make sure it has a key, for example|True|it 's array |['array']|[]|['array']|False|False|False|False
30480672|30480777|4|2|Last note: this works only if your value is a String.|True|value is String |['value']|[]|['value']|False|False|False|False
43494824|43495014|4|0|It is perfectly okay to store a complete structure as one bit of information if it is one bit of information actually.|False|it is bit of information actually |['bit']|[]|['bit', 'information']|False|False|False|False
29696572|29696688|0|0|you can use push method only if the object is an array:|True|object is array |['array', 'object']|[]|['array', 'object']|False|False|False|False
29696572|41064401|0|0|make sure you push into an Array only and if their is error like Uncaught TypeError: data.push is not a function ** then check for type of data you can do this by consol.log ( data ) hope this will help|True|their is error like TypeError : data.push not function ** then check for type of data you can do this by consol.log -LRB- data -RRB- hope this will help |['function', 'type']|['error']|['error', 'consol.log', 'data.push', 'function', 'type', 'data']|False|False|False|False
31276220|32931094|3|0|You can fix this problem if you are the owner of both domains:|False|you are owner of domains |['owner']|[]|['owner', 'domains']|False|False|False|False
28596295|48112890|1|0|From this if a user need message then he can get alert message.|True|message then |['message']|[]|['message']|False|False|False|False
45598461|45603025|2|1|It's easy enough to adapt the code if that's not the case )|False|that not case |['case']|[]|['case']|False|False|False|False
30101603|43458007|0|0|"FYI, if someone's using jsonb in > = 9.5 and they only care about top-level elements being merged without duplicate keys, then it's as easy as using the | | operator:"|False|'s jsonb in > = 9.5 and they only care about elements being merged without duplicate keys |['keys', 'elements', 'jsonb']|[]|['keys', 'elements', 'jsonb']|False|False|False|False
39406043|52137543|4|1|This mean that you wo n't need to wait until this file will load - as you will if you choice to work with CW - meaning faster application !|False|you choice to work with CW - meaning faster application |['application', 'choice']|[]|['application', 'choice']|False|False|False|False
34600003|34600032|1|0|For instance, if one of the values is CW, the CW would produce an invalid JSON which can not be loaded:|False|one of values is CW |['values']|[]|['values']|False|False|False|False
31730834|31836226|4|1|However I would recommend that you make the translation slightly different then the json file so you can see if that is the case before adding the force reload.|False|that is case before adding reload |['reload', 'case']|[]|['reload', 'case']|False|False|False|False
32818884|32828120|0|1|It can read some, but not create, especially if you host in IIS.|False|you host in IIS |['host']|[]|['host']|False|False|False|False
40057854|40058055|5|0|The third option CW is important if the root object of the received JSON is not an array and not a dictionary.|False|object of JSON not array and not dictionary |['array', 'dictionary', 'object']|[]|['array', 'dictionary', 'object']|False|False|False|False
31102784|31352212|2|0|Does n't matter if the API is streaming or that we need to connect every X second as that we can take into account ?|False|API is streaming or that we need to connect X second as that we can take into account |['streaming', 'account']|[]|['streaming', 'account']|True|False|False|False
31102784|33598613|1|0|You instantiate it with one line if your push message generation script is on the same server.|False|script is on server |['server', 'script']|[]|['server', 'script']|False|False|False|False
32071318|32138635|7|0|The whole idea is mapReady is a simple catch ... You can add the if statement to the initialize function.|False|statement |['statement']|[]|['mapReady', 'statement']|False|False|False|False
32071318|32138635|8|0|In past testing, if i load a website from my localhost and have something like google maps.|False|i load website from localhost and have something like maps |['website', 'load', 'maps', 'localhost']|[]|['website', 'load', 'maps', 'something', 'localhost']|False|True|False|False
29044209|29186757|6|0|To be safe, you have to both set the CW option and, if that option is CW, also the CW option.|False|option is CW |['option']|[]|['option']|False|False|False|False
30249406|30266100|0|0|I do n't know if it's the best solution, but what I'm trying now is to just pass values as strings unformatted except for a decimal point, like so:|False|it 's solution |['solution']|[]|['solution']|False|False|True|False
36354704|50128788|0|1|Or while unwrapping you can assign empty string to property if the value is nil|False|value is nil |['value']|[]|['nil', 'value']|False|False|False|False
36354704|50148332|1|1|And you would n't know if it was nil or empty string from server.|False|it was nil or empty string from server |['server', 'string']|[]|['server', 'string']|False|False|False|False
40421100|40423914|3|0|There's no error because CW satisfies type CW because it has all of its properties, and the CW function can be called with no runtime errors even if what it receives is n't an instance of CW as long as it has the same properties.|False|what it receives n't instance of CW long as it has properties |['properties', 'instance']|[]|['properties', 'instance']|False|False|False|False
30125965|30186380|12|0|So if PowerShell is your thing, you could have the best of both worlds:|False|PowerShell is thing |['powershell']|[]|['PowerShell', 'thing']|False|False|False|False
36141388|36141631|3|1|So if the data is a nested json structure, the function will not return any of the deeper keys.|False|data is structure |['structure']|[]|['structure', 'data']|False|False|False|False
30156407|30225282|4|0|After this exit point assuming the data confirmed to the model, you can validate if the data is within certain limits.|False|data is within limits |['limits']|[]|['limits', 'data']|False|False|False|False
47232187|47232318|1|1|That means you do n't have to use CW anymore if you are on the latest release.|False|you are on release |['release']|[]|['release']|False|False|False|False
29164419|36127195|1|0|In pre-marshalling method, you have to pass a modified fields CW to CW function if client's email is CW.|False|'s email is CW |['email']|[]|['email']|False|False|False|False
37816269|52402431|1|1|If you leave the CW clause, it throws ` Subquery returns more than 1 row' if more keys found ( safe mode ).|False|you leave clause |['clause']|[]|['clause']|False|False|False|False
30030933|30031292|1|0|Or if your CW may include more then one object:|False|CW may include more object : |['object']|[]|['object']|False|False|False|False
